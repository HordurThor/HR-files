DROP TABLE IF EXISTS Participate;
DROP TABLE IF EXISTS Monitors;
DROP TABLE IF EXISTS Serve_in;
DROP TABLE IF EXISTS Reviews;
DROP TABLE IF EXISTS Grants;
DROP TABLE IF EXISTS Opposes;
DROP TABLE IF EXISTS Opponent;
DROP TABLE IF EXISTS Party;
DROP TABLE IF EXISTS Enemy;
DROP TABLE IF EXISTS Asset;
DROP TABLE IF EXISTS Roles;
DROP TABLE IF EXISTS Sponsor;
DROP TABLE IF EXISTS Linking;
DROP TABLE IF EXISTS Member;
DROP TABLE IF EXISTS People;


SET client_encoding TO 'UTF8';



CREATE TABLE People(
ID INTEGER PRIMARY KEY NOT NULL,
Name VARCHAR(255),
Address VARCHAR(255),
Phone VARCHAR(255),
DOB DATE,
DOD DATE DEFAULT NULL
);

CREATE TABLE Member(
MemberID INTEGER PRIMARY KEY NOT NULL,
Start_date DATE DEFAULT NULL,
FOREIGN KEY(MemberID) REFERENCES People(ID)
);

CREATE TABLE Linking(
ID INTEGER PRIMARY KEY NOT NULL,
Name VARCHAR(255),
Type VARCHAR(255),
Description VARCHAR(500)
);

CREATE TABLE Sponsor(
Date DATE PRIMARY KEY NOT NULL,
Name VARCHAR(255),
Address VARCHAR(255),
Industry VARCHAR(255)
);

CREATE TABLE Roles(
ID INTEGER PRIMARY KEY NOT NULL,
Title VARCHAR(255),
Salary INTEGER
);

CREATE TABLE Asset(
Name VARCHAR(255) NOT NULL,
MemberID INTEGER NOT NULL,
Detail VARCHAR(255),
Uses VARCHAR(255),
FOREIGN KEY(MemberID) REFERENCES Member(MemberID),
PRIMARY KEY (Name, MemberID)
);

CREATE TABLE Enemy(
EnemyID INTEGER PRIMARY KEY NOT NULL,
Reason VARCHAR(255),
FOREIGN KEY (EnemyID) REFERENCES People(ID)
);

CREATE TABLE Party(
ID INTEGER PRIMARY KEY NOT NULL,
EnemyID INTEGER,
Country VARCHAR(255),
Name VARCHAR(255),
FOREIGN KEY (EnemyID) REFERENCES Enemy(EnemyID)
);

CREATE TABLE Opponent(
ID INTEGER PRIMARY KEY NOT NULL,
EnemyID INTEGER,
FOREIGN KEY (EnemyID) REFERENCES Enemy(EnemyID)
);

CREATE TABLE Opposes(
MemID INTEGER NOT NULL, 
OppID INTEGER NOT NULL,
Start_date DATE,
End_date DATE,
FOREIGN KEY (MemID) REFERENCES Member(MemberID),
FOREIGN KEY (OppID) REFERENCES Opponent(ID)
);

CREATE TABLE Grants(
MemID INTEGER NOT NULL,
Date DATE PRIMARY KEY NOT NULL,
SponsDate DATE NOT NULL,
Amount INTEGER,
Payback INTEGER,
FOREIGN KEY (MemID) REFERENCES Member(MemberID),
FOREIGN KEY (SponsDate) REFERENCES Sponsor(Date)
);

CREATE TABLE Reviews(
MemID INTEGER NOT NULL,
GrantDate DATE NOT NULL,
Date DATE,
Grade FLOAT,
FOREIGN KEY (MemID) REFERENCES Member(MemberID),
FOREIGN KEY (GrantDate) REFERENCES Grants(DATE)
);

CREATE TABLE Serve_in(
MemID INTEGER NOT NULL,
RoleID INTEGER NOT NULL,
Start_date DATE,
End_date DATE,
FOREIGN KEY (MemID) REFERENCES Member(MemberID),
FOREIGN KEY (RoleID) REFERENCES Roles(ID)
);

CREATE TABLE Monitors(
MemID INTEGER NOT NULL,
PartyID INTEGER NOT NULL,
Start_date DATE PRIMARY KEY NOT NULL,
End_date DATE,
FOREIGN KEY (MemID) REFERENCES Member(MemberID),
FOREIGN KEY (PartyID) REFERENCES Party(ID)
);

CREATE TABLE Participate(
PeopID INTEGER PRIMARY KEY NOT NULL,
MembID INTEGER NOT NULL,
LinkID INTEGER NOT NULL,
FOREIGN KEY (PeopID) REFERENCES People(ID),
FOREIGN KEY (MembID) REFERENCES Member(MemberID),
FOREIGN KEY (LinkID) REFERENCES Linking(ID)
);



CREATE TRIGGER Check_Grant AFTER INSERT AS
BEGIN 
    IF EXISTS(SELECT Date, MemID FROM Grants)
    BEGIN
        ROLLBACK TRANSACTION
        RAISERROR('Member has already been granted today')
    End
End;
